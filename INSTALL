# Installation from deb on Ubuntu 14.04 (trusty)
# ----------------------------------------------

$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0412F522
$ echo "deb http://repo.openbytes.ie/ubuntu trusty main" > /etc/apt/sources.list.d/patchman.list
$ apt-get update
$ apt-get install python-patchman
# Modify /etc/patchman/settings.py to suit your site
$ patchman-manage syncdb


# Installation from deb on Debian 7 (wheezy)
# ------------------------------------------

$ echo "deb http://http.debian.net/debian wheezy-backports main" > /etc/apt/sources.list.d/backports.list
$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0412F522
$ echo "deb http://repo.openbytes.ie/debian wheezy main" > /etc/apt/sources.list.d/patchman.list
$ apt-get update
$ apt-get install python-django/wheezy-backports
$ apt-get install python-patchman
# Modify /etc/patchman/settings.py to suit your site
$ patchman-manage migrate
$ patchman-manage createsuperuser


# Installation from git on Ubuntu 14.04 and Debian 8
# ----------------------------------------------------

Django 1.8 is the minimum version required to run the latest git version of
patchman. Django 1.8 is in the jessie-backports apt repository for Debian 8. To
add this repo, run the following command:

# echo "deb http://http.debian.net/debian jessie-backports main" >> /etc/apt/sources.list.d/jessie-backports.list

# 1. Install dependencies.
apt-get install python-django-tagging python-django \
python-django-extensions python-argparse python-lxml python-rpm python-debian \
python-pygooglechart python-cracklib python-progressbar libapache2-mod-wsgi \
apache2

# If python-django-tagging is older than 0.3.3, you may need to install a
# newer version. E.g. to upgrade to the latest pip version:
pip install --upgrade django-tagging

# 2. Check out current git to e.g. /srv/patchman
cd /srv
git clone https://github.com/furlongm/patchman.git

# 3. Copy server settings example file to /etc/patchman
mkdir /etc/patchman && cp /srv/patchman/etc/settings.py.sample /etc/patchman/settings.py

# 4. Modify settings file to suit your site
vi /etc/patchman/settings.py

# e.g. for a mysql backend:
#
# Make sure mysql-server and the python mysql bindings are installed:
#
# apt-get install mysql-server python-mysqldb
#
# Create database and users:
#
#mysql> CREATE DATABASE patchman CHARACTER SET utf8 COLLATE utf8_general_ci;
#Query OK, 1 row affected (0.00 sec)
#
#mysql> GRANT ALL PRIVILEGES ON patchman.* TO patchman@localhost IDENTIFIED BY 'changeme';
#Query OK, 0 rows affected (0.00 sec)
#
# Then modify /etc/patchman/settings.py to have the following:
#
#ADMINS = (
#    ('Patchman Admin', 'you@example.com'),
#)
#
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.mysql',    # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
#        'NAME': 'patchman',                      # Or path to database file if using sqlite3.
#        'USER': 'patchman',                      # Not used with sqlite3.
#        'PASSWORD': 'changeme',                  # Not used with sqlite3.
#        'HOST': '',                               # Set to empty string for localhost. Not used with sqlite3.
#        'PORT': '',                               # Set to empty string for default. Not used with sqlite3.
#        'STORAGE_ENGINE': 'INNODB',
#        'CHARSET' : 'utf8'
#    }
#}

# 5. Enable mod-wsgi and copy the apache conf file
a2enmod wsgi
cp /srv/patchman/etc/patchman-apache.conf /etc/apache2/conf-available/patchman.conf
vi /etc/apache2/conf-available/patchman.conf # change /usr/lib/python2.7/dist-packages/patchman to /srv/patchman/patchman
a2enconf patchman

# 6. Edit the networks allowed to report to apache and reload apache
vi /etc/apache2/conf-enabled/patchman.conf
service apache2 reload

# 7. Initialise the database, perform migrations, and collect static files.
cd /srv/patchman/patchman
./manage.py syncdb # answer questions here if required

./manage.py migrate

vi /srv/patchman/patchman/settings.py # change STATICFILES_DIRS to /srv/patchman/media

./manage.py collectstatic

# 8. Deploy the client and/or yum/apt plugins via e.g. puppet, and add a daily
# cronjob, e.g.
# 0 7 * * * /bin/sleep $((RANDOM\%600)); PATH=/bin:/sbin:/usr/bin:/usr/sbin /usr/local/sbin/patchman-client

# 9. Optionally install celeryd/rabbitmq for realtime processing of reports:
apt-get install python-django-celery rabbitmq-server
./manage.py syncdb
./manage.py migrate
./manage.py celeryd_detach
# add the last command to an initscript (e.g. /etc/rc.local) to make it
# persistent over reboot

# 10. Alternatively, or in addition to 9, set up a cronjob to run all the daily tasks, e.g.
#
# 30 8 * * * http_proxy=http://myproxy.example.com:3128 PYTHONPATH=/srv/patchman /srv/patchman/sbin/patchman -a -q
#
# Run PYTHONPATH=/srv/patchman /srv/patchman/sbin/patchman -h to view all options.

# 11. You can optionally run memcached:
apt-get install memcached python-memcache
# and add the following to /etc/patchman/settings.py
#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#        'LOCATION': '127.0.0.1:11211',
#    }
#}

# 12. To test your installation, run the client locally:
/srv/patchman/client/patchman-client -s http://127.0.0.1/patchman/

# and then run the daily server tasks:
PYTHONPATH=/srv/patchman /srv/patchman/sbin/patchman -a

# The django interface should be available at http://127.0.0.1/patchman/
